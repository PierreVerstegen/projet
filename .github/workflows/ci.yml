# ============================================================
# CI - étapes 1 : Tests automatiques uniquement (CI simple)
# ============================================================

name: CI - étapes 1 (test uniquement)

#region Déclencheurs du workflows
on:
  # Exécuter la CI à chaque PR vers le main
  pull_request:
    branches: [main]

  # Exécuter la CI à chaque push directe sur le main
  push:
    branches: [main]

  # Lancement manuel depuis l'interface GitHub Actions
  workflow_dispatch:
#endregion

#region Permissions minimales
permissions: 
  contents: write
  pull-requests: write

#endregion

#region Définition des jobs
jobs:

  #region JOB 1 - CI : Intégration continue
  ci_pipeline:
    runs-on: ubuntu-latest  # Runner Ubuntu GitHub

    steps:
      #region Étape 1 - Récupération du code source
      - name: Checkout du code
        uses: actions/checkout@v4
        # Récupère l'état du dépôt au SHA de la PR/push
      #endregion

      #region Étape 2 - Installation de Python
      - name: Configurer Python
        uses: actions/setup-python@v5
        with:
          python-version: 3.11  # Adapter la version à celle utilisée par ton projet
      #endregion

      #region Étape 3 - Installation des dépendances
      - name: Installer les dépendances
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt  # ⚠️ Le fichier doit inclure pytest
      #endregion

      #region Étape 4 - Exécution des tests unitaires
      - name: Lancer les tests unitaires
        run: |
          export PYTHONPATH=.
          pytest -v
      #endregion

      #region Étape 5 - Auto-merge de la pull request
      - name: Auto merge de la pull request
        # notre étape ne s'executera que si :
        # - tout les test précédent qui on reussi (success())
        # - l'événement est une 'pull_request' (et non un push direct)
        if: ${{success() && github.event_name == 'pull_request'}}
        uses: pascalgn/automerge-action@v0.16.4
        env:
          GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}} # authentification GitHub
          MERGE_METHOD: squash                    # Fusion en squash (compacter tout les commit)
          MERGE_DELETE_BRANCH: true               # supprimer la branche une fusionnée
          MERGE_LABELS: ""                        # LAbel requis pour un merge
          MERGE_RETRIES: 6                        # réessaie jusqu'a 6 si la PR n'est pas encore prête
          MERGE_RETRIES_SLEEP: 10000              # délai (ms) entre chaque tentative
          # notre action vient de la marketplace GitHub (pascalgn/automerge-action)
          # Elle automatise le merge de PR validées 
      #endregion
  
  #endregion

  #region JOB 2 - CD : Tag + Release
  create_release:
    needs: ci_pipeline # Attendre la fin du job CI (test + automerge & delete de la branche subsidiaire)
    runs-on: ubuntu-latest
    # Condition
    # - a PR vient d'ête fusionnée (cas principal)
    # - Ou su un push direct a été effectué sur le main  (hotfix)
    if: github.event.pull_request.merged == true || github.ref == 'refs/heads/main'

    steps:
      #region 1 : checkout propre pour le job CD
      - name: Checkout du code
        uses: actions/checkout@v4
      #endregion

      #region 2 : Création automatique d'un tag
      - name: Créer un tag automatique
        id : tag
        uses : anothrNick/github-tag-action@1.75.0
        env:
          GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
          DEFAULT_BUMP: patch
          RELEASE_BRANCHES: main
          # L'objectif de notre action est de calculé la prochaine version
          # et créer un tag (1.0.2 => 1.0.3) => Bump par default PATCH
      #endregion

      #region 3 : Création de la Realase GitHub
      - name: Créer un une release GitHub à partir du tag
        uses: softprops/action-gh-release@v2.4.1
        with:
          tag_name: ${{steps.tag.outputs.new_tag}}
          name: "Version ${{steps.tag.outputs.new_tag}}"
          body: |
            Nouvelle version publié automatiquement.

            Détails du pipeline:
              - Test unitaires validés
              - Pull Request fusionné dans 'Main'
              - Branche Feature supprimé (Trunk base)
              - Tag & Release créés
        env:
          GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
      #endregion
  #endregion

#endregion